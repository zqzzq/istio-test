---
# 2 services will get istio injected
---
apiVersion: v1
kind: Service
metadata:
  name: echosrv1
  namespace: perf-istio
spec:
  ports:
  - port: 8080
    name: http-echo
  - port: 8079
    name: grpc-ping
  selector:
    app: echosrv1
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: echo-svc-deployment1
  namespace: perf-istio
spec:
  replicas: 1 # tells deployment to run 1 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      # a unique name is generated from the deployment name
      labels:
        app: echosrv1
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - istio-ingressgateway
              topologyKey: kubernetes.io/hostname
      containers:
      - name: echosrv
        image: registry.icp.com:5000/library/istio/docker.io/istio/fortio:latest_release
        imagePullPolicy: Always # needed despite what is documented to really get latest
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: echosrv2
  namespace: perf-istio
spec:
  ports:
  - port: 8080
    name: http-echo
  - port: 8079
    name: grpc-ping
  selector:
    app: echosrv2
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: echo-svc-deployment2
  namespace: perf-istio
spec:
  replicas: 1 # tells deployment to run 1 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      # a unique name is generated from the deployment name
      labels:
        app: echosrv2
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - echosrv1
              topologyKey: kubernetes.io/hostname
      containers:
      - name: echosrv
        image: registry.icp.com:5000/library/istio/docker.io/istio/fortio:latest_release
        imagePullPolicy: Always # needed despite what is documented to really get latest
        ports:
        - containerPort: 8080
---
# 2 services don't injected sidecar
---
apiVersion: v1
kind: Service
metadata:
  name: echosrv3
  namespace: perf-fortio
spec:
  ports:
  - port: 8080
    name: http-echo
  - port: 8079
    name: grpc-ping
  selector:
    app: echosrv3
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: echo-svc-deployment3
  namespace: perf-fortio
spec:
  replicas: 1 # tells deployment to run 1 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # a unique name is generated from the deployment name
      labels:
        app: echosrv3
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - istio-ingressgateway
              topologyKey: kubernetes.io/hostname
      containers:
      - name: echosrv
        image: registry.icp.com:5000/library/istio/docker.io/istio/fortio:latest_release
        imagePullPolicy: Always # needed despite what is documented to really get latest
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: echosrv4
  namespace: perf-fortio
spec:
  ports:
  - port: 8080
    name: http-echo
  - port: 8079
    name: grpc-ping
  selector:
    app: echosrv4
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: echo-svc-deployment4
  namespace: perf-fortio
spec:
  replicas: 1 # tells deployment to run 1 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # a unique name is generated from the deployment name
      labels:
        app: echosrv4
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - echosrv3
              topologyKey: kubernetes.io/hostname
      containers:
      - name: echosrv
        image: registry.icp.com:5000/library/istio/docker.io/istio/fortio:latest_release
        imagePullPolicy: Always # needed despite what is documented to really get latest
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: fortio-client
  namespace: perf-client
spec:
  ports:
  - port: 8080
    name: http
  - port: 8079
    name: grpc-ping
  selector:
    app: fortio-client
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: fortio-client
  namespace: perf-client
spec:
  replicas: 1 # tells deployment to run 1 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # a unique name is generated from the deployment name
      labels:
        app: fortio-client
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - istio-ingressgateway
              topologyKey: kubernetes.io/hostname
      containers:
      - name: fortio-client
        image: registry.icp.com:5000/library/istio/docker.io/istio/fortio:latest_release
        imagePullPolicy: Always # needed despite what is documented to really get latest
        ports:
        - containerPort: 8080
